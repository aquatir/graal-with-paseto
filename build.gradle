plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"

    // id("com.hpe.kraal") version "0.0.16"  May be used for coroutine. Can wait until graal 20.1 is released. See: https://github.com/oracle/graal/issues/366
}


mainClassName = 'codesample.kotlin.graalvm.paseto.Application'
version "0.1"
group "codesample.kotlin.graalvm.paseto"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    developmentOnly 
}

dependencies {

    // graalvm
    compileOnly "org.graalvm.nativeimage:svm:19.3.1"

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "javax.annotation:javax.annotation-api:1.3.2"

    // token
    implementation 'dev.paseto:jpaseto-api:0.5.0'
    runtimeOnly 'dev.paseto:jpaseto-impl:0.5.0'
    runtimeOnly 'dev.paseto:jpaseto-sodium:0.5.0'
    runtimeOnly 'dev.paseto:jpaseto-jackson:0.5.0'

}

test.classpath += configurations.developmentOnly


ext {

}

sourceSets {
    main.java.srcDirs += 'src/main/java'

    main.kotlin.srcDirs += 'src/main/kotlin'
    main.resources.srcDirs += 'src/main/resources'
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

test {
    useJUnitPlatform()
}

compileJava {
    options.encoding = 'UTF-8'
}

compileKotlin {
	kotlinOptions {
	    jvmTarget = '1.8' 
	    //Will retain parameter names for Java reflection
	    javaParameters = true 
	}
}

compileTestKotlin {
	kotlinOptions {
	    jvmTarget = '1.8' 
	    javaParameters = true 
	}
}
